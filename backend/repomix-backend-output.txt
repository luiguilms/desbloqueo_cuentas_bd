This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-20T21:35:21.358Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
config/dbConfig.js
package.json
routes/users.js
server.js

================================================================
Files
================================================================

================
File: config/dbConfig.js
================
const oracledb = require('oracledb');
require('dotenv').config(); // Asegúrate de que dotenv está cargado para leer el .env
console.log('DB_HOST:', process.env.DB_HOST);
console.log('DB_USER:', process.env.DB_USER);
console.log('DB_PASSWORD:', process.env.DB_PASSWORD);
const dbConfig = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  connectString: `(DESCRIPTION = 
    (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = ${process.env.DB_HOST})(PORT = ${process.env.DB_PORT})))
    (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = ${process.env.DB_SERVICE_NAME}) )
  )`
};

async function getConnection() {
  try {
    return await oracledb.getConnection(dbConfig);
  } catch (err) {
    console.error("Error conectando a Oracle:", err);
    throw err;
  }
}

module.exports = { getConnection };

================
File: package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "body-parser": "^1.20.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "oracledb": "^6.7.1",
    "repomix": "^0.2.20",
    "repopack": "^0.1.45"
  }
}

================
File: routes/users.js
================
const express = require('express');
const router = express.Router();
const oracledb = require('oracledb');
const { getConnection } = require('../config/dbConfig');

// Ruta para obtener opciones de NOMDESC
router.get('/users/user-options/:username', async (req, res) => {
  const { username } = req.params;
  let connection;
  
  try {
    connection = await getConnection();
    
    console.log("Buscando opciones para usuario:", username.toUpperCase());

    // Obtener el NOMDESC correcto del usuario
    const userDesc = await connection.execute(
      `SELECT NOMDESC FROM SYSTABREP.SY_USERS_BT WHERE USERNAME = :1`,
      [username.toUpperCase()]
    );

    // Debug log
    console.log("Resultado userDesc:", userDesc.rows);

    if (userDesc.rows.length === 0) {
      return res.status(404).send({ message: 'Usuario no encontrado' });
    }

    // Obtener 4 NOMDESC aleatorios diferentes
    const otherOptions = await connection.execute(
      `SELECT NOMDESC 
       FROM (
         SELECT DISTINCT NOMDESC 
         FROM SYSTABREP.SY_USERS_BT 
         WHERE USERNAME != :1 
           AND NOMDESC IS NOT NULL
         ORDER BY DBMS_RANDOM.VALUE
       ) 
       WHERE ROWNUM <= 4`,
      [username.toUpperCase()]
    );

    // Debug log
    console.log("Resultado otherOptions:", otherOptions.rows);

    // Extraer correctamente los valores de las filas
    const userDescValue = userDesc.rows[0][0];  // Cambiado de .NOMDESC a [0]
    const otherValues = otherOptions.rows.map(row => row[0]);  // Cambiado de .NOMDESC a [0]

    let options = [...otherValues, userDescValue].filter(desc => desc != null);

    // Debug log
    console.log("Opciones finales:", options);

    // Verificar que tengamos opciones válidas
    if (options.length === 0) {
      return res.status(500).send({ message: 'No se encontraron opciones válidas' });
    }

    // Mezclar el array de opciones
    options = options.sort(() => Math.random() - 0.5);

    res.json({ options });

  } catch (err) {
    console.error('Error completo:', err);
    res.status(500).send({ message: 'Error obteniendo opciones' });
  } finally {
    if (connection) {
      try {
        await connection.close();
      } catch (err) {
        console.error('Error cerrando la conexión:', err);
      }
    }
  }
});

// Ruta para desbloquear usuario
router.post('/users/unlock', async (req, res) => {
 const { username, email, selectedDesc } = req.body;

 if (!username || !email || !selectedDesc) return res.status(400).send({
   message: "El nombre de usuario, correo y descripción son requeridos"
 });

 let connection;
 try {
   connection = await getConnection();
   
   // Primero verificamos solo la existencia del usuario en la base
   const userExists = await connection.execute(
     `SELECT 1 FROM SYSTABREP.SY_USERS_BT WHERE USERNAME = :1`,
     [username.toUpperCase()]
   );

   if (userExists.rows.length === 0) {
     return res.status(400).send({
       message: 'El usuario no existe en la Base de Datos'
     });
   }

   // Si existe el usuario, verificamos que coincida el correo y la descripción
   const checkUser = await connection.execute(
     `SELECT 1 FROM SYSTABREP.SY_USERS_BT 
      WHERE USERNAME = :1 
      AND CORREO = :2 
      AND NOMDESC = :3`,
     [username.toUpperCase(), email, selectedDesc]
   );

   if (checkUser.rows.length === 0) {
     return res.status(400).send({
       message: 'El correo o la descripción no coinciden con el usuario'
     });
   }

   // Si todo está correcto, procedemos con el desbloqueo
   const result = await connection.execute(
     `DECLARE
        l_line VARCHAR2(32767);
        l_status INTEGER;
      BEGIN
        DBMS_OUTPUT.ENABLE(32767);
        SP_BD_DESBLOQUEO_CUENTA(:username);
        DBMS_OUTPUT.GET_LINE(l_line, l_status);
        :out := l_line;
      END;`,
     {
       username: username.toUpperCase(),
       out: { dir: oracledb.BIND_OUT, type: oracledb.STRING, maxSize: 32767 }
     }
   );
   
   const message = result.outBinds.out || 'Usuario desbloqueado exitosamente';
   res.status(200).send({ message });

 } catch (err) {
   console.error('Error:', err);
   if (err.errorNum) {
     switch (err.errorNum) {
       case 20001:
         return res.status(400).send({
           message: 'El usuario debe renovar sus permisos con SINF, ha superado su fecha de vigencia.'
         });
       case 20002:
         return res.status(400).send({
           message: 'El usuario no está registrado en la Base de Datos de Bantotal'
         });
       default:
         return res.status(500).send({
           message: err.message.split('\n')[0]
         });
     }
   }
   res.status(500).send({ message: "Error desbloqueando usuario" });
 } finally {
   if (connection) {
     try {
       await connection.close();
     } catch (err) {
       console.error('Error cerrando la conexión:', err);
     }
   }
 }
});

module.exports = router;

================
File: server.js
================
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');  // Asegúrate de importar cors
const userRoutes = require('./routes/users');

require('dotenv').config();

const app = express();
const PORT = 3000;

// Usar cors para permitir solicitudes desde el frontend
app.use(cors());

// Usar body-parser para poder manejar solicitudes JSON
app.use(bodyParser.json());

// Definir las rutas de la API
app.use('/api', userRoutes);

app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});
